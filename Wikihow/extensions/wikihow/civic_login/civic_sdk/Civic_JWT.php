<?php
/**
 * Created by PhpStorm.
 * User: franky
 * Date: 2017/05/19
 * Time: 1:38 PM
 */

//error_reporting(E_ALL ^ E_WARNING);
//require('Civic_SIP.php');

class Civic_JWT
{
    private $tokenString;   // The string representation of the token
    private $requestBody;   // The fields that get posted to Civic in the API call
    private $authHeader;    // The Authentication Header
    private $civicExt;      // The Civic Extension (generated by hash_hmac)
    private $jwt;           // JSON Web Token (KelvinMO/SimpleJWT)
    private $civicSIP;      // Civic SIP Object

    function __construct($appId, $iss, $aud, $priv, $pub, $sec, $sip_url, $keyFromFile, $sub)
    {
        $this->requestBody = array();
        $this->tokenString = "";
        $this->civicSIP = new Civic_SIP();
        $this->civicSIP->setAppId($appId);
        $this->civicSIP->setIss($iss);
        $this->civicSIP->setAud($aud);
        $this->civicSIP->setPrivateJWK($priv);
        $this->civicSIP->setPublicJWK($pub);
        $this->civicSIP->setCivicSecret($sec);
        $this->civicSIP->setSipURL($sip_url);
        $this->civicSIP->setKeyFromFile($keyFromFile);
        $this->civicSIP->setSub($sub);
    }

    /*
     * Create Token
     */
    function createToken($headers, $claims, $keyFromFile = true)
    {
        $set = new SimpleJWT\Keys\KeySet();
        $key = null;

        if ($keyFromFile) {
            $key = new SimpleJWT\Keys\ECKey(file_get_contents($this->civicSIP->getPrivateJWK()), 'json');
        } else {
            $key = new SimpleJWT\Keys\ECKey($this->civicSIP->getPrivateJWK(), 'json');
        }
        $set->add($key);
        $this->jwt = new SimpleJWT\JWT($headers, $claims);

        try {
            $this->tokenString = $this->jwt->encode($set);
            //var_dump($this->tokenString);
        } catch (\RuntimeException $e) {
            //echo "Exception: $e";
            //return array('Error')
            $civic_data = array(
                'Error' => (array(
                    'Number' => $e->getCode(),
                    'Message' => $e->getMessage())
                )
            );
            return $civic_data;
        }
        return true;

    }

    function decodeToken($token, $keyFromFile = true)
    {
        //print_r($token);
        $set = new SimpleJWT\Keys\KeySet();
        $key = null;
        if ($keyFromFile) {
            $key = new SimpleJWT\Keys\ECKey(file_get_contents($this->civicSIP->getPublicJWK()), 'json');
        } else {
            $key = new SimpleJWT\Keys\ECKey($this->civicSIP->getPublicJWK(), 'json');
        }
        $set->add($key);

        try {
            $this->jwt = SimpleJWT\JWT::decode($token, $set, 'ES256');
            //print_r($this->jwt);
        } catch (SimpleJWT\InvalidTokenException $e) {
            //echo "Exception: $e";
            $civic_data = array(
                'Error' => (array(
                    'Number' => $e->getCode(),
                    'Message' => $e->getMessage())
                )
            );
            return $civic_data;
        }


    }

    function getTokenHeaders()
    {
        return $this->jwt->getHeaders();
    }

    function getTokenClaims()
    {
        return $this->jwt->getClaims();
    }


    function createAuthHeader($scopeRequest, $method)
    {
        /*
        * Make the new token here
        */
        $headers = array('alg' => 'ES256', 'typ' => 'JWT');
        $claims = array('aud' => $this->civicSIP->getAud(), 'iss' => $this->civicSIP->getIss(), 'iat' => $this->civicSIP->getIat(),
            'exp' => $this->civicSIP->getExp(), 'data' => array('method' => $method, 'path' => $scopeRequest),
            'sub' => $this->civicSIP->getSub());
        $result = $this->createToken($headers, $claims, $this->civicSIP->getKeyFromFile());

        $this->authHeader = "Civic " . $this->tokenString . "." . $this->civicExt;
        return $result;
    }

    /*
     * Create the Civic Extension (appended to the Authentication Header)
     * - Base64 Encode SHA 256 Hash MAC : Request Body & Civic Secret
     */
    function createCivicExt()
    {
        $this->civicExt = base64_encode(hash_hmac('sha256', $this->requestBody, utf8_encode($this->civicSIP->getCivicSecret()), true));
    }

    /*
     * Creates the request body (which is posted to the API)
     */

    function createRequestBodyFromToken($token_str)
    {
        $this->requestBody = array('authToken' => $token_str);
        $this->requestBody = json_encode($this->requestBody);
        //print_r($this->requestBody);
    }

    function exchangeCode()
    {
        //$ch = curl_init($this->civicSIP->getSipURL());
	    $ch = curl_init('https://api.civic.com/sip/prod/scopeRequest/authCode');

        $header_array = array();
        $header_array[] = "Content-Type: application/json";
        $header_array[] = "Authorization: " . $this->authHeader . "";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header_array);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $this->requestBody);

        $result = curl_exec($ch);
        if ($result === false) {
            return (array(
                'Error' => (array(
                    'Number' => curl_errno($ch),
                    'Message' => curl_error($ch))
                )
            ));
        }
        curl_close($ch);
        $civic_data = json_decode($result, true);


        if (array_key_exists('message', $civic_data)) {
            $tmp = $civic_data;
            if ($tmp['message'] == null) {
                $tmp['message'] = "No response from Civic";
            }
            $civic_data = array(
                'Error' => (array(
                    'Number' => -1,
                    'Message' => $tmp['message'])
                )
            );
        } else {
            $civic_data = Civic_SIP::parseData($civic_data);
            //var_dump($civic_data);
            /*
             * Do everything else here
             */
            //var_dump($civic_data);

            $this->decodeToken($civic_data['jwt'], $this->civicSIP->getKeyFromFile());
            //$headers = $this->getTokenHeaders();
            /*
             * Do a claim check on token expiration
             */
            $claims = $this->getTokenClaims();


            $timeCheck = time();
            if ($timeCheck > $claims['exp']) {
                if ($timeCheck - $claims['exp'] > 60) {
                    $civic_data = array(
                        'Error' => (array(
                            'Number' => -1,
                            'Message' => "Token has expired!")
                        )
                    );
                    return $civic_data;
                }
            }


            if ($civic_data['encrypted']) {
                // Decode the token
                //$this->decodeToken($civic_data['jwt'], $this->civicSIP->getKeyFromFile());
                //$headers = $this->getTokenHeaders();
                /*
                 * Do a claim check on token expiration
                 */
                //$claims = $this->getTokenClaims();
                $decrypted = Civic_SIP::decryptData($claims['data'], $this->civicSIP->getCivicSecret());
                if ($decrypted === false) {
                    $civic_data = array(
                        'Error' => (array(
                            'Number' => -1,
                            'Message' => "Could not decrypt payload data!")
                        )
                    );
                } else {
                    $civic_data = Civic_SIP::transformData(json_decode($decrypted, true), $civic_data);
                }
                //var_dump($civic_data);
                //$decrypted = Civic_SIP::parseData($claims['data']);
            }
        }
        return $civic_data;

    }


    /**
     * @return mixed
     */
    public function getTokenString()
    {
        return $this->tokenString;
    }

    /**
     * @param mixed $tokenString
     */
    public function setTokenString($tokenString)
    {
//        nl2br('');
//        echo ">>> SETTING INCOMING JSON WEB STRING: $tokenString";
//        nl2br('');
        $this->tokenString = $tokenString;
    }

    /**
     * @return string
     */
    public function getPrivateJWK(): string
    {
        return $this->privateJWK;
    }

    /**
     * @param string $privateJWK
     */
    public function setPrivateJWK(string $privateJWK)
    {
        $this->privateJWK = $privateJWK;
    }

    /**
     * @return string
     */
    public function getPublicJWK(): string
    {
        return $this->publicJWK;
    }

    /**
     * @param string $publicJWK
     */
    public function setPublicJWK(string $publicJWK)
    {
        $this->publicJWK = $publicJWK;
    }

}


