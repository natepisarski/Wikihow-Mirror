{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkSectionAddOverlay.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkSectionOverlay.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/autosign.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/mobile.talk.overlays.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/talkBoard.js"],"names":["mfExtend","require","Overlay","PageGateway","util","autosign","toast","Icon","TalkSectionAddOverlay","options","this","editorApi","api","pageGateway","call","extend","className","events","input .wikitext-editor, .summary","change .wikitext-editor, .summary","click .confirm-save","title","currentPageTitle","eventBus","_saveHit","defaults","prototype","cancelMsg","mw","msg","topicTitlePlaceHolder","topicContentPlaceHolder","editingMsg","waitMsg","waitIcon","name","additionalClassNames","toHtmlString","template","get","templatePartials","contentHeader","saveHeader","postRender","showHidden","$confirm","$el","find","$subject","$ta","hide","empty","confirmMessage","val","window","confirm","apply","arguments","onTextInput","self","clearTimeout","timer","setTimeout","trim","prop","onSaveClick","isOnTalkPage","save","then","status","emit","invalidatePage","show","error","editMsg","details","type","heading","d","Deferred","text","removeClass","addClass","postWithToken","action","section","sectiontitle","summary","reject","module","exports","user","popup","Page","Button","TalkSectionOverlay","focus textarea","click .save-button","header","content","saveButton","block","progressive","label","undefined","reply","info","$saveButton","hideSpinner","_enableComments","renderFromApi","$commentBox","isAnon","remove","$textarea","getPage","pageData","page","getSection","id","render","onFocusTextarea","enableSaveButton","showSpinner","appendtext","redirect","data","response","indexOf","code","test","m","talkBoard","overlay","deprecate","define","View","sections","board","explanation","length","append","parseHTML","map","attr","line"],"mappings":"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","file":"mobile.talk.overlays.js","sourcesContent":["var\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tutil = require( '../mobile.startup/util' ),\n\tautosign = require( './autosign' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\tIcon = require( '../mobile.startup/Icon' );\n\n/**\n * Overlay for adding a talk section\n * @class TalkSectionAddOverlay\n * @extends Overlay\n * @uses Toast\n *\n * @param {Object} options Configuration options\n * @param {Object} options.title Title of the talk page being modified\n * @param {Object} options.currentPageTitle Title of the page before the overlay appears\n * @param {OO.EventEmitter} options.eventBus Object used to emit talk-added-wo-overlay\n * and talk-discussion-added events\n */\nfunction TalkSectionAddOverlay( options ) {\n\tthis.editorApi = options.api;\n\tthis.pageGateway = new PageGateway( options.api );\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-overlay overlay',\n\t\t\tevents: {\n\t\t\t\t'input .wikitext-editor, .summary': 'onTextInput',\n\t\t\t\t'change .wikitext-editor, .summary': 'onTextInput',\n\t\t\t\t'click .confirm-save': 'onSaveClick'\n\t\t\t}\n\t\t} )\n\t);\n\tthis.title = options.title;\n\tthis.currentPageTitle = options.currentPageTitle;\n\tthis.eventBus = options.eventBus;\n\t// Variable to indicate, if the overlay will be closed by the save function\n\t// or by the user. If this is false and there is content in the input fields,\n\t// the user will be asked, if he want to abandon his changes before we close\n\t// the Overlay, otherwise the Overlay will be closed without any question.\n\tthis._saveHit = false;\n}\n\nmfExtend( TalkSectionAddOverlay, Overlay, {\n\t/**\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.cancelMsg Caption for cancel button on edit form.\n\t * @property {string} defaults.topicTitlePlaceHolder Placeholder text to prompt user to add\n\t * a talk page topic subject.\n\t * @property {string} defaults.topicContentPlaceHolder Placeholder text to prompt user\n\t *  to add content to talk page content.\n\t * @property {string} defaults.editingMsg Label for button which\n\t *  submits a new talk page topic.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tcancelMsg: mw.msg( 'mobile-frontend-editor-cancel' ),\n\t\ttopicTitlePlaceHolder: mw.msg( 'mobile-frontend-talk-add-overlay-subject-placeholder' ),\n\t\ttopicContentPlaceHolder: mw.msg( 'mobile-frontend-talk-add-overlay-content-placeholder' ),\n\t\teditingMsg: mw.msg( 'mobile-frontend-talk-add-overlay-submit' ),\n\t\twaitMsg: mw.msg( 'mobile-frontend-talk-topic-wait' ),\n\t\t// icons.spinner can't be used, .loading has a fixed height, which breaks overlay-header\n\t\twaitIcon: new Icon( {\n\t\t\tname: 'spinner',\n\t\t\tadditionalClassNames: 'savespinner loading'\n\t\t} ).toHtmlString()\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.talk.overlays', 'SectionAddOverlay.hogan' ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontentHeader: mw.template.get( 'mobile.talk.overlays', 'SectionAddOverlay/contentHeader.hogan' ),\n\t\tsaveHeader: mw.template.get( 'mobile.editor.overlay', 'saveHeader.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.call( this );\n\t\tthis.showHidden( '.initial-header' );\n\t\tthis.$confirm = this.$el.find( 'button.confirm-save' );\n\t\tthis.$subject = this.$el.find( '.summary' );\n\t\tthis.$ta = this.$el.find( '.wikitext-editor' );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\thide: function () {\n\t\tvar empty,\n\t\t\tconfirmMessage = mw.msg( 'mobile-frontend-editor-cancel-confirm' );\n\n\t\tempty = ( !this.$subject.val() && !this.$ta.val() );\n\t\t// TODO: Replace with an OOUI dialog\n\t\tif ( this._saveHit || empty || window.confirm( confirmMessage ) ) {\n\t\t\treturn Overlay.prototype.hide.apply( this, arguments );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t/**\n\t * Handles an input into a textarea and enables or disables the submit button\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tonTextInput: function () {\n\t\tvar self = this;\n\n\t\tclearTimeout( this.timer );\n\t\tthis.timer = setTimeout( function () {\n\t\t\tif ( !self.$ta.val().trim() || !self.$subject.val().trim() ) {\n\t\t\t\tself.$confirm.prop( 'disabled', true );\n\t\t\t} else {\n\t\t\t\tself.$confirm.prop( 'disabled', false );\n\t\t\t}\n\t\t}, 250 );\n\t},\n\t/**\n\t * Handles a click on the save button\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar self = this,\n\t\t\tisOnTalkPage = self.title === self.currentPageTitle;\n\n\t\tthis.showHidden( '.saving-header' );\n\t\tthis.save().then( function ( status ) {\n\t\t\tif ( status === 'ok' ) {\n\t\t\t\tif ( isOnTalkPage ) {\n\t\t\t\t\tself.eventBus.emit( 'talk-added-wo-overlay' );\n\t\t\t\t} else {\n\t\t\t\t\tself.pageGateway.invalidatePage( self.title );\n\t\t\t\t\ttoast.show( mw.msg( 'mobile-frontend-talk-topic-feedback' ) );\n\t\t\t\t\tself.eventBus.emit( 'talk-discussion-added' );\n\t\t\t\t\tself.hide();\n\t\t\t\t}\n\t\t\t}\n\t\t}, function ( error ) {\n\t\t\tvar editMsg = mw.msg( 'mobile-frontend-talk-topic-error' );\n\n\t\t\tself.$confirm.prop( 'disabled', false );\n\t\t\tswitch ( error.details ) {\n\t\t\t\tcase 'protectedpage':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-protected' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'noedit':\n\t\t\t\tcase 'blocked':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-permission' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spamdetected':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-spam' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'badtoken':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-badtoken' );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttoast.show( editMsg, { type: 'error' } );\n\t\t\tself.showHidden( '.save-header, .save-panel' );\n\t\t} );\n\t},\n\t/**\n\t * Save new talk section\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t * @return {jQuery.Deferred} Object that either will be resolved with ok parameter\n\t * or rejected with type error.\n\t */\n\tsave: function () {\n\t\tvar heading = this.$subject.val(),\n\t\t\tself = this,\n\t\t\td = util.Deferred(),\n\t\t\ttext = this.$ta.val();\n\n\t\tthis.$ta.removeClass( 'error' );\n\t\tthis.$subject.removeClass( 'error' );\n\n\t\t// propagate, that we save an edit and want to close the Overlay without\n\t\t// any interruption (user questions e.g.)\n\t\tthis._saveHit = true;\n\n\t\tthis.$el.find( '.content' ).empty().addClass( 'loading' );\n\t\t// FIXME: while saving: a spinner would be nice\n\t\t// FIXME: This should be using a gateway e.g. TalkGateway, PageGateway or EditorGateway\n\t\treturn this.editorApi.postWithToken( 'csrf', {\n\t\t\taction: 'edit',\n\t\t\tsection: 'new',\n\t\t\tsectiontitle: heading,\n\t\t\ttitle: self.title,\n\t\t\tsummary: mw.msg( 'newsectionsummary', heading ),\n\t\t\ttext: autosign( text )\n\t\t} ).then( function () {\n\t\t\treturn 'ok';\n\t\t}, function ( msg ) {\n\t\t\t// FIXME: Throw an Error\n\t\t\treturn d.reject( {\n\t\t\t\ttype: 'error',\n\t\t\t\tdetails: msg\n\t\t\t} );\n\t\t} );\n\t}\n} );\n\nmodule.exports = TalkSectionAddOverlay;\n","var\n\tuser = mw.user,\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tpopup = require( '../mobile.startup/toast' ),\n\tautosign = require( './autosign' ),\n\tPage = require( '../mobile.startup/Page' ),\n\tButton = require( '../mobile.startup/Button' );\n\n/**\n * Overlay for showing talk page section\n * @class TalkSectionOverlay\n * @extends Overlay\n * @uses PageGateway\n * @uses Page\n * @uses Button\n * @uses Toast\n * @param {Object} options\n */\nfunction TalkSectionOverlay( options ) {\n\tthis.editorApi = options.api;\n\tthis.pageGateway = new PageGateway( options.api );\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-overlay overlay',\n\t\t\tevents: {\n\t\t\t\t'focus textarea': 'onFocusTextarea',\n\t\t\t\t'click .save-button': 'onSaveClick'\n\t\t\t}\n\t\t} )\n\t);\n}\n\nmfExtend( TalkSectionOverlay, Overlay, {\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\theader: mw.template.get( 'mobile.talk.overlays', 'Section/header.hogan' ),\n\t\tcontent: mw.template.get( 'mobile.talk.overlays', 'Section/content.hogan' )\n\t} ),\n\t/**\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.title Title.\n\t * @property {Section} defaults.section that is currently being viewed in overlay.\n\t * @property {string} defaults.reply Reply heading.\n\t * @property {string} defaults.info Message that informs the user their talk reply will be\n\t * automatically signed.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tsaveButton: new Button( {\n\t\t\tblock: true,\n\t\t\tadditionalClassNames: 'save-button',\n\t\t\tprogressive: true,\n\t\t\tlabel: mw.msg( 'mobile-frontend-editor-save' )\n\t\t} ).options,\n\t\ttitle: undefined,\n\t\tsection: undefined,\n\t\treply: mw.msg( 'mobile-frontend-talk-reply' ),\n\t\tinfo: mw.msg( 'mobile-frontend-talk-reply-info' )\n\t} ),\n\t/**\n\t * Fetches the talk topics of the page specified in options.title\n\t * if options.section is not defined.\n\t * @inheritdoc\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\t\tthis.$saveButton = this.$el.find( '.save-button' );\n\t\tif ( !this.options.section ) {\n\t\t\tthis.renderFromApi( this.options );\n\t\t} else {\n\t\t\tthis.hideSpinner();\n\t\t\tthis._enableComments();\n\t\t}\n\t},\n\t/**\n\t * Enables comments on the current rendered talk topic\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @private\n\t */\n\t_enableComments: function () {\n\t\tthis.$commentBox = this.$el.find( '.comment' );\n\t\tif ( user.isAnon() ) {\n\t\t\tthis.$commentBox.remove();\n\t\t} else {\n\t\t\tthis.$textarea = this.$commentBox.find( 'textarea' );\n\t\t}\n\t},\n\t/**\n\t * Loads the discussion from api and add it to the Overlay\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @param {Object} options Render options\n\t */\n\trenderFromApi: function ( options ) {\n\t\tvar self = this;\n\n\t\tthis.pageGateway.getPage( options.title ).then( function ( pageData ) {\n\t\t\tvar page = new Page( pageData );\n\t\t\toptions.section = page.getSection( options.id );\n\t\t\tself.render( options );\n\t\t\tself.hideSpinner();\n\t\t} );\n\t},\n\t/**\n\t * Handler for focus of textarea\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tonFocusTextarea: function () {\n\t\tthis.$textarea.removeClass( 'error' );\n\t},\n\t/**\n\t * Handle a click on the save button\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar val = this.$textarea.val(),\n\t\t\tself = this;\n\n\t\tfunction enableSaveButton() {\n\t\t\tself.$saveButton.prop( 'disabled', false );\n\t\t}\n\t\tif ( val ) {\n\t\t\t// show a spinner\n\t\t\tthis.showSpinner();\n\t\t\tthis.$saveButton.prop( 'disabled', true );\n\t\t\t// sign and add newline to front\n\t\t\tval = '\\n\\n' + autosign( val );\n\t\t\t// FIXME: This should be using a gateway\n\t\t\t// e.g. TalkGateway, PageGateway or EditorGateway\n\t\t\tthis.editorApi.postWithToken( 'csrf', {\n\t\t\t\taction: 'edit',\n\t\t\t\ttitle: this.options.title,\n\t\t\t\tsection: this.options.id,\n\t\t\t\tappendtext: val,\n\t\t\t\tredirect: true\n\t\t\t} ).then( function () {\n\t\t\t\tpopup.show( mw.msg( 'mobile-frontend-talk-reply-success' ) );\n\t\t\t\t// invalidate the cache\n\t\t\t\tself.pageGateway.invalidatePage( self.options.title );\n\n\t\t\t\tself.renderFromApi( self.options );\n\n\t\t\t\tenableSaveButton();\n\t\t\t}, function ( data, response ) {\n\t\t\t\t// FIXME: Code sharing with EditorOverlay?\n\t\t\t\tvar msg,\n\t\t\t\t\t// When save failed with one of these error codes, the returned\n\t\t\t\t\t// message in response.error.info will be forwarded to the user.\n\t\t\t\t\t// FIXME: This shouldn't be needed when info texts are all localized.\n\t\t\t\t\twhitelistedErrorInfo = [\n\t\t\t\t\t\t'readonly',\n\t\t\t\t\t\t'blocked',\n\t\t\t\t\t\t'autoblocked'\n\t\t\t\t\t];\n\n\t\t\t\tif (\n\t\t\t\t\tresponse.error &&\n\t\t\t\t\twhitelistedErrorInfo.indexOf( response.error.code ) > -1\n\t\t\t\t) {\n\t\t\t\t\tmsg = response.error.info;\n\t\t\t\t} else {\n\t\t\t\t\tmsg = mw.msg( 'mobile-frontend-editor-error' );\n\t\t\t\t}\n\n\t\t\t\tself.hideSpinner();\n\t\t\t\tpopup.show( msg, 'toast error' );\n\n\t\t\t\tenableSaveButton();\n\t\t\t} );\n\t\t} else {\n\t\t\tthis.$textarea.addClass( 'error' );\n\t\t}\n\t}\n} );\n\nmodule.exports = TalkSectionOverlay;\n","/**\n * Autosign a block of text if necessary\n * @instance\n * @param {string} text\n * @return {string} text with an autosign (\"~~~~\") if necessary\n */\nfunction autosign( text ) {\n\treturn /~{3,5}/.test( text ) ? text : text + ' ~~~~';\n}\n\nmodule.exports = autosign;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\ttalkBoard = require( './talkBoard' ),\n\toverlay = require( '../mobile.startup/talk/overlay' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tTalkSectionAddOverlay = require( './TalkSectionAddOverlay' ),\n\tTalkSectionOverlay = require( './TalkSectionOverlay' );\n\n/**\n * Backwards compatible method for obtaining a TalkOverlay\n * used by Minerva until it updates itself.\n * @deprecated\n * @param {Object} options\n * @return {Overlay}\n */\nfunction talkOverlay( options ) {\n\treturn overlay( options.title, new PageGateway( options.api ) );\n}\n\nm.deprecate( 'mobile.talk.overlays/talkOverlay', talkOverlay,\n\t'Use `mobile.startup` (talk.overlay)' );\nm.define( 'mobile.talk.overlays/talkBoard', talkBoard );\nm.define( 'mobile.talk.overlays/TalkSectionAddOverlay', TalkSectionAddOverlay );\nm.define( 'mobile.talk.overlays/TalkSectionOverlay', TalkSectionOverlay ); // resource-modules-disable-line\n","var util = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' );\n\n/**\n * A board of talk topics\n * @param {Section[]} sections\n * @return {View}\n */\nfunction talkBoard( sections ) {\n\tvar board,\n\t\texplanation = sections.length > 0 ?\n\t\t\tmw.msg( 'mobile-frontend-talk-explained' ) :\n\t\t\tmw.msg( 'mobile-frontend-talk-explained-empty' );\n\n\tboard = new View( {\n\t\tclassName: 'talk-board'\n\t} );\n\tboard.append( [\n\t\tutil.parseHTML( '<p class=\"content-header\">' ).text( explanation ),\n\t\t// FIXME: Substitute with a TopicTitleList (T173534)\n\t\tutil.parseHTML( '<ul class=\"topic-title-list\">' ).append(\n\t\t\tsections.map( function ( section ) {\n\t\t\t\treturn util.parseHTML( '<li>' ).append(\n\t\t\t\t\tutil.parseHTML( '<a>' )\n\t\t\t\t\t\t.attr( 'href', '#/talk/' + section.id )\n\t\t\t\t\t\t.text( section.line )\n\t\t\t\t);\n\t\t\t} )\n\t\t)\n\t] );\n\treturn board;\n}\n\nmodule.exports = talkBoard;\n"],"sourceRoot":""}