{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.mediaViewer/ImageGateway.js","webpack://mfModules.[name]/./src/mobile.mediaViewer/ImageOverlay.js","webpack://mfModules.[name]/./src/mobile.mediaViewer/LoadErrorMessage.js","webpack://mfModules.[name]/./src/mobile.mediaViewer/mobile.mediaViewer.js"],"names":["sizeBuckets","actionParams","require","util","findSizeBucket","size","i","length","ImageGateway","options","this","_cache","api","prototype","getThumb","title","cachedThumb","$window","getWindow","imageSizeMultiplier","window","devicePixelRatio","get","prop","titles","iiprop","iiurlwidth","width","iiurlheight","height","then","resp","query","pages","imageinfo","Error","_findSizeBucket","module","exports","Overlay","mfExtend","Icon","icons","Button","cancelButton","cancel","detailsButton","label","mw","msg","additionalClassNames","progressive","slideLeftButton","rotation","name","slideRightButton","LoadErrorMessage","router","loader","ImageOverlay","gateway","eventBus","call","extend","className","events","click .image-wrapper","click .slider-button","hasFixedHeader","hideOnExitClick","template","defaults","licenseLinkMsg","thumbnails","onSlide","ev","nextThumbnail","$el","find","target","closest","data","emit","EVENT_SLIDE","preRender","self","forEach","thumbnail","getFileName","caption","getDescription","galleryOffset","_enableArrowImages","thumbs","lastThumb","nextThumb","offset","undefined","_disableArrowImages","remove","_handleRetry","postRender","$img","$spinner","spinner","showLoadFailMsg","hasLoadError","hide","retryPath","getPath","on","bind","prependTo","addImageLoadClass","addClass","$details","append","apply","prepend","author","url","descriptionurl","thumbWidth","thumbwidth","thumbHeight","thumbheight","imgRatio","parseHTML","document","attr","thumburl","_positionImage","extmetadata","LicenseShortName","text","value","Artist","replace","adjustDetails","onToggleDetails","toggle","onExitClick","arguments","EVENT_EXIT","show","detailsHeight","windowWidth","windowHeight","windowRatio","is","outerHeight","css","insertBefore","View","click .load-fail-msg-link a","isTemplateMode","icon","toHtmlString","msgToUser","retryTxt","onRetry","m","define"],"mappings":"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","file":"mobile.mediaViewer.js","sourcesContent":["var sizeBuckets = [ 320, 640, 800, 1024, 1280, 1920, 2560, 2880 ],\n\tactionParams = require( './../mobile.startup/actionParams' ),\n\tutil = require( './../mobile.startup/util' );\n\n/**\n * Gets the first size larger than or equal to the provided size\n * @memberof ImageGateway\n * @param {number} size\n * @return {number}\n */\nfunction findSizeBucket( size ) {\n\tvar i = 0;\n\twhile ( size > sizeBuckets[i] && i < sizeBuckets.length - 1 ) {\n\t\t++i;\n\t}\n\treturn sizeBuckets[i];\n}\n\n/**\n * API for retrieving image thumbnails for a given page\n * @class ImageGateway\n *\n * @param {Object} options Configuration options\n * @property {mw.Api} options.api\n */\nfunction ImageGateway( options ) {\n\tthis._cache = {};\n\tthis.api = options.api;\n}\n/**\n * Get thumbnail via the API and cache it. Return the result from the cache if exists.\n * @param {string} title Url of image\n * @return {jQuery.Deferred} with the image info\n */\nImageGateway.prototype.getThumb = function ( title ) {\n\tvar cachedThumb = this._cache[title],\n\t\t$window = util.getWindow(),\n\t\timageSizeMultiplier = ( window.devicePixelRatio && window.devicePixelRatio > 1 ) ?\n\t\t\twindow.devicePixelRatio : 1;\n\n\tif ( !cachedThumb ) {\n\t\tthis._cache[title] = this.api.get( actionParams( {\n\t\t\tprop: 'imageinfo',\n\t\t\ttitles: title,\n\t\t\tiiprop: [ 'url', 'extmetadata' ],\n\t\t\t// request an image devicePixelRatio times bigger than the reported screen size\n\t\t\t// for retina displays and zooming\n\t\t\tiiurlwidth: findSizeBucket( $window.width() * imageSizeMultiplier ),\n\t\t\tiiurlheight: findSizeBucket( $window.height() * imageSizeMultiplier )\n\t\t} ) ).then( function ( resp ) {\n\t\t\t// imageinfo is undefined for missing pages.\n\t\t\tif ( resp.query && resp.query.pages &&\n\t\t\t\tresp.query.pages[0] && resp.query.pages[0].imageinfo ) {\n\t\t\t\treturn resp.query.pages[0].imageinfo[0];\n\t\t\t}\n\t\t\tthrow new Error( 'The API failed to return any pages matching the titles.' );\n\t\t} );\n\t}\n\n\treturn this._cache[title];\n};\n\nImageGateway._findSizeBucket = findSizeBucket;\nmodule.exports = ImageGateway;\n","var Overlay = require( './../mobile.startup/Overlay' ),\n\tutil = require( './../mobile.startup/util' ),\n\tmfExtend = require( './../mobile.startup/mfExtend' ),\n\tIcon = require( './../mobile.startup/Icon' ),\n\ticons = require( './../mobile.startup/icons' ),\n\tButton = require( './../mobile.startup/Button' ),\n\tcancelButton = icons.cancel( 'gray' ),\n\tdetailsButton = new Button( {\n\t\tlabel: mw.msg( 'mobile-frontend-media-details' ),\n\t\tadditionalClassNames: 'button',\n\t\tprogressive: true\n\t} ),\n\tslideLeftButton = new Icon( {\n\t\trotation: 90,\n\t\tname: 'arrow-invert'\n\t} ),\n\tslideRightButton = new Icon( {\n\t\trotation: -90,\n\t\tname: 'arrow-invert'\n\t} ),\n\tLoadErrorMessage = require( './LoadErrorMessage' ),\n\tImageGateway = require( './ImageGateway' ),\n\t// FIXME: mw.loader.require is a private function but there's no other way to get hold of\n\t// this right now using require will cause webpack to resolve it\n\t// Can be rewritten to mw.router when https://gerrit.wikimedia.org/r/#/c/mediawiki/core/+/482732 has been merged\n\trouter = mw.loader.require( 'mediawiki.router' );\n\n/**\n * Displays images in full screen overlay\n * @class ImageOverlay\n * @extends Overlay\n * @uses Icon\n * @uses ImageGateway\n * @uses LoadErrorMessage\n * @uses Router\n * @fires ImageOverlay#ImageOverlay-exit\n * @fires ImageOverlay#ImageOverlay-slide\n * @param {Object} options Configuration options\n * @param {OO.EventEmitter} options.eventBus Object used to listen for resize:throttled events\n */\nfunction ImageOverlay( options ) {\n\tthis.gateway = options.gateway || new ImageGateway( {\n\t\tapi: options.api\n\t} );\n\tthis.router = options.router || router;\n\tthis.eventBus = options.eventBus;\n\n\tOverlay.call(\n\t\tthis,\n\t\tutil.extend(\n\t\t\t{\n\t\t\t\tclassName: 'overlay media-viewer',\n\t\t\t\tevents: {\n\t\t\t\t\t'click .image-wrapper': 'onToggleDetails',\n\t\t\t\t\t// Click tracking for table of contents so we can see if people interact with it\n\t\t\t\t\t'click .slider-button': 'onSlide'\n\t\t\t\t}\n\t\t\t},\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( ImageOverlay, Overlay, {\n\t/**\n\t * allow pinch zooming\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\thasFixedHeader: false,\n\t/**\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\thideOnExitClick: false,\n\t/**\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.mediaViewer', 'Overlay.hogan' ),\n\n\t/**\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {mw.Api} defaults.api instance of API to use\n\t * @property {string} defaults.licenseLinkMsg Link to license information in media viewer.\n\t * @property {Thumbnail[]} defaults.thumbnails a list of thumbnails to browse\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tlicenseLinkMsg: mw.msg( 'mobile-frontend-media-license-link' ),\n\t\tthumbnails: []\n\t} ),\n\t/**\n\t * Event handler for slide event\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonSlide: function ( ev ) {\n\t\tvar nextThumbnail = this.$el.find( ev.target ).closest( '.slider-button' ).data( 'thumbnail' );\n\t\tthis.emit( ImageOverlay.EVENT_SLIDE, nextThumbnail );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tpreRender: function () {\n\t\tvar self = this;\n\t\tthis.options.thumbnails.forEach( function ( thumbnail, i ) {\n\t\t\tif ( thumbnail.getFileName() === self.options.title ) {\n\t\t\t\tself.options.caption = thumbnail.getDescription();\n\t\t\t\tself.galleryOffset = i;\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Setup the next and previous images to enable the user to arrow through\n\t * all images in the set of images given in thumbs.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @param {Array} thumbs A set of images, which are available\n\t * @private\n\t */\n\t_enableArrowImages: function ( thumbs ) {\n\t\tvar offset = this.galleryOffset,\n\t\t\tlastThumb, nextThumb;\n\n\t\tif ( this.galleryOffset === undefined ) {\n\t\t\t// couldn't find a suitable matching thumbnail so make\n\t\t\t// next slide start at beginning and previous slide be end\n\t\t\tlastThumb = thumbs[thumbs.length - 1];\n\t\t\tnextThumb = thumbs[0];\n\t\t} else {\n\t\t\t// identify last thumbnail\n\t\t\tlastThumb = thumbs[ offset === 0 ? thumbs.length - 1 : offset - 1 ];\n\t\t\tnextThumb = thumbs[ offset === thumbs.length - 1 ? 0 : offset + 1 ];\n\t\t}\n\n\t\tthis.$el.find( '.prev' ).data( 'thumbnail', lastThumb );\n\t\tthis.$el.find( '.next' ).data( 'thumbnail', nextThumb );\n\t},\n\t/**\n\t * Disables the possibility to arrow through all images of the page.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @private\n\t */\n\t_disableArrowImages: function () {\n\t\tthis.$el.find( '.prev, .next' ).remove();\n\t},\n\n\t/**\n\t * Handler for retry event which triggers when user tries to reload overlay\n\t * after a loading error.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @private\n\t */\n\t_handleRetry: function () {\n\t\t// A hacky way to simulate a reload of the overlay\n\t\tthis.router.emit( 'hashchange' );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar $img,\n\t\t\t$spinner = icons.spinner().$el,\n\t\t\tthumbs = this.options.thumbnails || [],\n\t\t\tself = this;\n\n\t\t/**\n\t\t * Display media load failure message\n\t\t * @method\n\t\t * @ignore\n\t\t */\n\t\tfunction showLoadFailMsg() {\n\t\t\tself.hasLoadError = true;\n\n\t\t\t$spinner.hide();\n\t\t\t// hide broken image if present\n\t\t\tself.$el.find( '.image img' ).hide();\n\n\t\t\t// show error message if not visible already\n\t\t\tif ( self.$el.find( '.load-fail-msg' ).length === 0 ) {\n\t\t\t\tnew LoadErrorMessage( { retryPath: self.router.getPath() } )\n\t\t\t\t\t.on( 'retry', self._handleRetry.bind( self ) )\n\t\t\t\t\t.prependTo( self.$el.find( '.image' ) );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Start image load transitions\n\t\t * @method\n\t\t * @ignore\n\t\t */\n\t\tfunction addImageLoadClass() {\n\t\t\t$img.addClass( 'image-loaded' );\n\t\t}\n\n\t\tif ( thumbs.length < 2 ) {\n\t\t\tthis._disableArrowImages();\n\t\t} else {\n\t\t\tthis._enableArrowImages( thumbs );\n\t\t}\n\n\t\tthis.$details = this.$el.find( '.details' );\n\t\tthis.$el.find( '.image' ).append( $spinner );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\t\tthis.$details.prepend( detailsButton.$el );\n\n\t\tthis.gateway.getThumb( self.options.title ).then( function ( data ) {\n\t\t\tvar author, url = data.descriptionurl + '#mw-jump-to-license';\n\n\t\t\t$spinner.hide();\n\n\t\t\tself.thumbWidth = data.thumbwidth;\n\t\t\tself.thumbHeight = data.thumbheight;\n\t\t\tself.imgRatio = data.thumbwidth / data.thumbheight;\n\n\t\t\t// We need to explicitly specify document for context param as jQuery 3\n\t\t\t// will create a new document for the element if the context is\n\t\t\t// undefined. If element is appended to active document, event handlers\n\t\t\t// can fire in both the active document and new document which can cause\n\t\t\t// insidious bugs.\n\t\t\t// (https://api.jquery.com/jquery.parsehtml/#entry-longdesc)\n\t\t\t$img = self.parseHTML( '<img>', document );\n\n\t\t\t// Remove the loader when the image is loaded or display load fail\n\t\t\t// message on failure\n\t\t\t//\n\t\t\t// Error event handler must be attached before error occurs\n\t\t\t// (https://api.jquery.com/error/#entry-longdesc)\n\t\t\t//\n\t\t\t// For the load event, it is more unclear what happens cross-browser when\n\t\t\t// the image is loaded from cache. It seems that a .complete check is\n\t\t\t// needed if attaching the load event after setting the src.\n\t\t\t// (http://stackoverflow.com/questions/910727/jquery-event-for-images-loaded#comment10616132_1110094)\n\t\t\t//\n\t\t\t// However, perhaps .complete check is not needed if attaching load\n\t\t\t// event prior to setting the image src\n\t\t\t// (https://stackoverflow.com/questions/12354865/image-onload-event-and-browser-cache#answer-12355031)\n\t\t\t$img.on( 'load', addImageLoadClass ).on( 'error', showLoadFailMsg );\n\t\t\t$img.attr( 'src', data.thumburl ).attr( 'alt', self.options.caption );\n\t\t\tself.$el.find( '.image' ).append( $img );\n\n\t\t\tself.$details.addClass( 'is-visible' );\n\t\t\tself._positionImage();\n\t\t\tself.$el.find( '.details a' ).attr( 'href', url );\n\t\t\tif ( data.extmetadata ) {\n\t\t\t\t// Add license information\n\t\t\t\tif ( data.extmetadata.LicenseShortName ) {\n\t\t\t\t\tself.$el.find( '.license a' )\n\t\t\t\t\t\t.text( data.extmetadata.LicenseShortName.value )\n\t\t\t\t\t\t.attr( 'href', url );\n\t\t\t\t}\n\t\t\t\t// Add author information\n\t\t\t\tif ( data.extmetadata.Artist ) {\n\t\t\t\t\t// Strip any tags\n\t\t\t\t\tauthor = data.extmetadata.Artist.value.replace( /<.*?>/g, '' );\n\t\t\t\t\tself.$el.find( '.license' ).prepend( author + ' &bull; ' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tself.adjustDetails();\n\t\t}, function () {\n\t\t\t// retrieving image location failed so show load fail msg\n\t\t\tshowLoadFailMsg();\n\t\t} );\n\n\t\tthis.eventBus.on( 'resize:throttled', this._positionImage.bind( this ) );\n\t},\n\n\t/**\n\t * Event handler that toggles the details bar.\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tonToggleDetails: function () {\n\t\tif ( !this.hasLoadError ) {\n\t\t\tthis.$el.find( '.cancel, .slider-button' ).toggle();\n\t\t\tthis.$details.toggle();\n\t\t\tthis._positionImage();\n\t\t}\n\t},\n\n\t/**\n\t * fixme: remove this redundant function.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @param {Event} ev\n\t */\n\tonExitClick: function ( ev ) {\n\t\tOverlay.prototype.onExitClick.apply( this, arguments );\n\t\tthis.emit( ImageOverlay.EVENT_EXIT, ev );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tOverlay.prototype.show.apply( this, arguments );\n\t\tthis._positionImage();\n\t},\n\n\t/**\n\t * Fit the image into the window if its dimensions are bigger than the window dimensions.\n\t * Compare window width to height ratio to that of image width to height when setting\n\t * image width or height.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @private\n\t */\n\t_positionImage: function () {\n\t\tvar detailsHeight, windowWidth, windowHeight, windowRatio, $img,\n\t\t\t$window = util.getWindow();\n\n\t\tthis.adjustDetails();\n\t\t// with a hidden details box we have a little bit more space, we just need to use it\n\t\tdetailsHeight = !this.$details.is( ':visible' ) ? 0 : this.$details.outerHeight();\n\t\twindowWidth = $window.width();\n\t\twindowHeight = $window.height() - detailsHeight;\n\t\twindowRatio = windowWidth / windowHeight;\n\t\t$img = this.$el.find( 'img' );\n\n\t\tif ( this.imgRatio > windowRatio ) {\n\t\t\tif ( windowWidth < this.thumbWidth ) {\n\t\t\t\t$img.css( {\n\t\t\t\t\twidth: windowWidth,\n\t\t\t\t\theight: 'auto'\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( windowHeight < this.thumbHeight ) {\n\t\t\t\t$img.css( {\n\t\t\t\t\twidth: 'auto',\n\t\t\t\t\theight: windowHeight\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tthis.$el.find( '.image-wrapper' ).css( 'bottom', detailsHeight );\n\t\tthis.$el.find( '.slider-button.prev' ).append( slideLeftButton.$el );\n\t\tthis.$el.find( '.slider-button.next' ).append( slideRightButton.$el );\n\t\tcancelButton.$el.insertBefore( this.$details );\n\t},\n\n\t/**\n\t * Function to adjust the height of details section to not more than 50% of window height.\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tadjustDetails: function () {\n\t\tvar windowHeight = util.getWindow().height();\n\t\tif ( this.$el.find( '.details' ).height() > windowHeight * 0.50 ) {\n\t\t\tthis.$el.find( '.details' ).css( 'max-height', windowHeight * 0.50 );\n\t\t}\n\t}\n} );\n\n/**\n * fixme: remove this redundant constant.\n * @memberof ImageOverlay\n * @event\n */\nImageOverlay.EVENT_EXIT = 'ImageOverlay-exit';\n/**\n * @memberof ImageOverlay\n * @event\n */\nImageOverlay.EVENT_SLIDE = 'ImageOverlay-slide';\n\nmodule.exports = ImageOverlay;\n","var util = require( './../mobile.startup/util' ),\n\tmfExtend = require( './../mobile.startup/mfExtend' ),\n\tIcon = require( './../mobile.startup/Icon' ),\n\tView = require( './../mobile.startup/View' );\n\n/**\n * Shows the user a load failure message\n * @class LoadErrorMessage\n * @extends View\n * @fires LoadErrorMessage#retry\n *\n * @param {Object} options Configuration options\n */\nfunction LoadErrorMessage( options ) {\n\tif ( !options.retryPath ) {\n\t\tthrow new Error( '\\'retryPath\\' must be set in options param. Received: ' + options.retryPath );\n\t}\n\tView.call(\n\t\tthis,\n\t\t{ events: { 'click .load-fail-msg-link a': 'onRetry' } },\n\t\toptions\n\t);\n}\n\nmfExtend( LoadErrorMessage, View, {\n\ttemplate: mw.template.get( 'mobile.mediaViewer', 'LoadErrorMessage.hogan' ),\n\tisTemplateMode: true,\n\n\t/**\n\t\t* @inheritdoc\n\t\t* @cfg {Object} defaults Default options hash.\n\t\t* @cfg {string} defaults.icon HTML of the alert icon\n\t\t* @cfg {string} defaults.msgToUser Message shown when media load fails\n\t\t* @cfg {string} defaults.retryTxt Text of retry link\n\t\t* @memberof LoadErrorMessage\n\t\t* @instance\n\t\t*/\n\tdefaults: util.extend( {}, LoadErrorMessage.prototype.defaults, {\n\t\ticon: new Icon( {\n\t\t\tname: 'alert-invert',\n\t\t\tadditionalClassNames: 'load-fail-msg-icon'\n\t\t} ).toHtmlString(),\n\t\tmsgToUser: mw.msg( 'mobile-frontend-media-load-fail-message' ),\n\t\tretryTxt: mw.msg( 'mobile-frontend-media-load-fail-retry' )\n\t} ),\n\n\t/**\n\t * @inheritdoc\n\t * @memberof LoadErrorMessage\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tthis.$el.find( '.load-fail-msg-link a' ).attr( 'href', '#' + this.options.retryPath );\n\t},\n\n\t/**\n\t * Event handler for retry event\n\t * @param {jQuery.Event} ev\n\t * @return {boolean} Returns false to prevent default behavior for links and\n\t * stop the event from propagating\n\t * @memberof LoadErrorMessage\n\t * @instance\n\t */\n\tonRetry: function () {\n\t\t/**\n\t\t * Triggered when retry button is clicked.\n\t\t * @event LoadErrorMessage#retry\n\t\t */\n\t\tthis.emit( 'retry' );\n\n\t\treturn false;\n\t}\n} );\n\nmodule.exports = LoadErrorMessage;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tImageOverlay = require( './ImageOverlay' );\n\n// Expose for Minerva\nm.define( 'mobile.mediaViewer/ImageOverlay', ImageOverlay );\n"],"sourceRoot":""}